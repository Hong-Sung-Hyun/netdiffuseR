% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/random_graph.R
\name{rewire_graph}
\alias{rewire_graph}
\title{Rewires a graph}
\usage{
rewire_graph(graph, p, both.ends = FALSE, self = FALSE, multiple = FALSE,
  undirected = getOption("diffnet.undirected"), copy.first = FALSE)
}
\arguments{
\item{graph}{Any class of accepted graph format (see \code{\link{netdiffuseR-graphs}})}

\item{p}{Numeric scalar/vector of length \eqn{T}. Set the probability of changing an edge.}

\item{both.ends}{Logical scalar. When \code{TRUE} rewires both ends.}

\item{self}{Logical scalar. When \code{TRUE}, allows loops (self edges).}

\item{multiple}{Logical scalar. When \code{TRUE} allows multiple edges.}

\item{undirected}{Logical scalar. \code{TRUE} when the graph is undirected.}

\item{copy_first}{Logical scalar. When \code{TRUE} and \code{graph} is dynamic uses
the first slice as a baseline for the rest of slices (see details).}
}
\description{
By changing the endpoints of the edges, this is the workhorse of the
function \code{\link{rgraph_ws}}.
}
\details{
Rewiring assumes a weighted network, hence \eqn{G(i,j) = k = G(i',j')},
where \eqn{i',j'} are the new end points of the edge and \eqn{k} may not be equal
to one.

In the case of dynamic graphs, when \code{copy_first=TRUE}, after rewiring the
first slice--\eqn{t=1}--the rest of slices are generated by rewiring the rewired
version of the first slice. Formally:

\deqn{%
G(t)' = \left\{\bergin{array}{ll}
R(G(t)) & \mbox{if }t=1 \\
R(G(1)') & \mbox{otherwise}
\end{array}
\right.
}{%
G(t)' = R(G(t))  if t=1,
        R(G(1)') otherwise
}

Where \eqn{G(t)} is the t-th slice, \eqn{G(t)'} is the t-th rewired slice, and
\eqn{R} is the rewiring function. Otherwise, \code{copy.first=FALSE} (default),
The rewiring function is simply \eqn{G(t)' = R(G(t))}.
}
\author{
Vega Yon
}
\seealso{
Other simulation functions: \code{\link{rdiffnet}},
  \code{\link{rgraph_ba}}, \code{\link{rgraph_er}},
  \code{\link{rgraph_ws}}
}

